// src/utils/api/bookService.ts - API ÏùëÎãµ Ï≤òÎ¶¨ ÏàòÏ†ï
import axios from "axios";
import { BookDetailResponse } from "@/types/book";
import preferenceService from "./preferenceService";

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

// API ÏùëÎãµ Íµ¨Ï°∞Ïóê ÎßûÍ≤å ÌÉÄÏûÖ Ï†ïÏùò
interface ApiResponse {
  status: number;
  message: string;
  data: {
    books: any[];
    pagination: {
      totalElements: number;
      totalPages: number;
      currentPage: number;
      size: number;
    };
  };
}

// Í∏∞Î≥∏ Axios Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
const api = axios.create({
  baseURL: API_BASE_URL,
});

// ÏôÑÏ†ÑÌûà Ïù∏ÏΩîÎî©ÏùÑ Ïö∞ÌöåÌïòÎäî Ìï®Ïàò
const makeRawRequest = async (url: string) => {
  // ÏµúÏ¢Ö API URL Ï∂úÎ†•
  const fullUrl = `${API_BASE_URL}${url}`;
  console.log("üì£ ÏµúÏ¢Ö API URL:", fullUrl);

  return new Promise((resolve, reject) => {
    // XHR Í∞ùÏ≤¥ ÏÉùÏÑ±
    const xhr = new XMLHttpRequest();

    // ÏöîÏ≤≠ ÏÑ§Ï†ï
    xhr.open("GET", fullUrl, true);

    // ÏùëÎãµ ÌÉÄÏûÖ ÏÑ§Ï†ï
    xhr.responseType = "json";

    // ÏùëÎãµ Ï≤òÎ¶¨
    xhr.onload = function () {
      // ÏÉÅÌÉú ÏΩîÎìú Ï∂úÎ†•
      console.log("üì£ ÏùëÎãµ ÏÉÅÌÉú ÏΩîÎìú:", xhr.status);

      if (xhr.status >= 200 && xhr.status < 300) {
        // ÏÉÅÏÑ∏Ìïú ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
        console.log("üì£ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤¥:", xhr.response);

        // ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÌôïÏù∏ Î∞è Í∞ÄÍ≥µ
        const response = xhr.response;
        let processedResponse = {
          status: 200,
          message: "ÏÑ±Í≥µ",
          data: {
            books: [],
            pagination: {
              totalElements: 0,
              totalPages: 1,
              currentPage: 1,
              size: 20,
            },
          },
        };

        // ÏùëÎãµ Íµ¨Ï°∞Í∞Ä Îã§Î•º Í≤ΩÏö∞ Ï≤òÎ¶¨
        if (response) {
          // API ÏùëÎãµÏùò ÏΩîÎìú ÌïÑÎìú ÌôïÏù∏
          if (response.code) {
            processedResponse.status = response.code;
          } else if (response.status) {
            processedResponse.status = response.status;
          }

          // API ÏùëÎãµÏùò Î©îÏãúÏßÄ ÌïÑÎìú ÌôïÏù∏
          if (response.message) {
            processedResponse.message = response.message;
          }

          // API ÏùëÎãµÏùò data ÌïÑÎìú ÌôïÏù∏
          if (response.data) {
            // books Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ Î∞è ÏÑ§Ï†ï
            if (response.data.books) {
              processedResponse.data.books = response.data.books;
              console.log("üì£ books Îç∞Ïù¥ÌÑ∞ Í∏∏Ïù¥:", response.data.books.length);
            }

            // pagination Ï†ïÎ≥¥ ÌôïÏù∏ Î∞è ÏÑ§Ï†ï
            if (response.data.pagination) {
              processedResponse.data.pagination = {
                totalElements: response.data.pagination.totalElements || 0,
                totalPages: response.data.pagination.totalPages || 1,
                // ÌéòÏù¥ÏßÄ Î≤àÌò∏Î•º 1Î∂ÄÌÑ∞ ÏãúÏûëÌïòÎèÑÎ°ù Ï≤òÎ¶¨
                currentPage: response.data.pagination.currentPage || 1,
                size: response.data.pagination.size || 20,
              };
              console.log(
                "üì£ pagination Ï†ïÎ≥¥:",
                processedResponse.data.pagination
              );
            }
          } else {
            console.log("üì£ ÏùëÎãµÏóê data ÌïÑÎìúÍ∞Ä ÏóÜÏùå!");
          }
        }

        resolve(processedResponse);
      } else {
        console.error("üì£ HTTP ÏóêÎü¨:", xhr.status, xhr.statusText);
        console.error("üì£ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", xhr.response);
        reject(new Error(`HTTP ÏóêÎü¨: ${xhr.status}`));
      }
    };

    // ÏóêÎü¨ Ï≤òÎ¶¨
    xhr.onerror = function () {
      console.error("üì£ ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ Ïã§Ìå®");
      reject(new Error("ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ Ïã§Ìå®"));
    };

    // ÏöîÏ≤≠ Ìó§Îçî ÏÑ§Ï†ï
    xhr.setRequestHeader("Accept", "application/json");

    // ÏöîÏ≤≠ Ï†ÑÏÜ°
    xhr.send();
    console.log("üì£ ÏöîÏ≤≠ Ï†ÑÏÜ° ÏôÑÎ£å");
  });
};

// Ï±Ö Í¥ÄÎ†® ÏÑúÎπÑÏä§ API
export const bookService = {
  // Ï±Ö Î™©Î°ù Ï°∞Ìöå (Í≤ÄÏÉâ, Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ÎßÅ Ìè¨Ìï®)
  getBooks: async (url: string) => {
    try {
      console.log("üì£ ÏöîÏ≤≠ URL(ÏõêÎ≥∏):", url);

      // XMLHttpRequestÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïù∏ÏΩîÎî©ÏùÑ Ïö∞Ìöå
      const response = await makeRawRequest(url);
      return response;
    } catch (error) {
      console.error("üì£ Error in getBooks:", error);
      throw error;
    }
  },

  // Ï±Ö ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
  getBookDetail: async (bookId: number | string) => {
    try {
      const response = await api.get<BookDetailResponse>(`/books/${bookId}`);
      console.log(`${API_BASE_URL}/books/${bookId}`);
      return response;
    } catch (error) {
      console.error("Error in getBookDetail:", error);
      throw error;
    }
  },

  // Ï±Ö Î¶¨Î∑∞ Î™©Î°ù Ï°∞Ìöå
  getBookReviews: async (bookId: number | string, page = 1, size = 10) => {
    try {
      const response = await api.get(
        `/books/${bookId}/reviews?page=${page}&size=${size}`
      );
      return response.data;
    } catch (error) {
      console.error("Error in getBookReviews:", error);
      throw error;
    }
  },

  // Ï±Ö Î¶¨Î∑∞ ÏûëÏÑ±
  createBookReview: async (bookId: number | string, data: any) => {
    try {
      const response = await api.post(`/books/${bookId}/reviews`, data);
      return response.data;
    } catch (error) {
      console.error("Error in createBookReview:", error);
      throw error;
    }
  },

  // Ï±Ö Ï∞úÌïòÍ∏∞/Ï∞ú Ï∑®ÏÜå
  toggleWishlist: async (bookId: number | string) => {
    try {
      // preferenceServiceÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Í¥ÄÏã¨ÎèÑÏÑú Ï∂îÍ∞Ä
      const response = await preferenceService.addToPreference(bookId);
      return response;
    } catch (error) {
      console.error("Error in toggleWishlist:", error);
      throw error;
    }
  },

  // ÎÇ¥ ÏÑúÏû¨Ïóê Ï±Ö Ï∂îÍ∞Ä
  addToLibrary: async (bookId: number | string) => {
    try {
      // Í∏∞Ï°¥ ÏΩîÎìú Ïú†ÏßÄ...
      const librariesResponse = await api.get(`/library`, {
        params: { page: 0, size: 1 },
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
      });

      let libraryId;

      if (
        librariesResponse.data.data.allLibraries &&
        librariesResponse.data.data.allLibraries.length > 0
      ) {
        libraryId = librariesResponse.data.data.allLibraries[0].id;
      } else {
        const createResponse = await api.post(
          `/library`,
          { libraryName: "ÎÇ¥ ÎùºÏù¥Î∏åÎü¨Î¶¨1" },
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
              "Content-Type": "application/json",
            },
          }
        );
        libraryId = createResponse.data.data.id;
      }

      const response = await api.post(
        `/library/${libraryId}`,
        { bookId },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
            "Content-Type": "application/json",
          },
        }
      );

      return response.data;
    } catch (error) {
      console.error("Error in addToLibrary:", error);
      throw error;
    }
  },
};

export default bookService;
